package pi.transport.presentation.mbeans;




import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import org.primefaces.json.JSONException;

import pi.transport.persistance.User;
import pi.transport.services.UserService;
import pi.transport.webservices.Clientloginhttp;




@ManagedBean
@SessionScoped
public class UserBean {
	@EJB
	private UserService service;
     private int cin;
	
	private String password;
	private String firstName;
	private String lastName;
	private String adress;
	private String Email;
	
	private User user;

	
	private User userselected;
	private boolean loggedIn=true;
	
	

	public UserService getService() {
		return service;
	}
	public void setService(UserService service) {
		this.service = service;
	}
	public int getCin() {
		return cin;
	}
	public void setCin(int cin) {
		this.cin = cin;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getAdress() {
		return adress;
	}
	public void setAdress(String adress) {
		this.adress = adress;
	}
	public String getEmail() {
		return Email;
	}
	public void setEmail(String email) {
		Email = email;
	}
	public User getUser() {
		return user;
	}
	public void setUser(User user) {
		this.user = user;
	}
	public User getUserselected() {
		return userselected;
	}
	public void setUserselected(User userselected) {
		this.userselected = userselected;
	}
	public boolean isLoggedIn() {
		return loggedIn;
	}
	public void setLoggedIn(boolean loggedIn) {
		this.loggedIn = loggedIn;
	}
	public User finduser(String  id){
		System.out.println("okok");
	User u=	service.getuserr(id);
	System.out.println("aaa"+u.getEmail());
		return u;
	
		
	}
	public String findUserbyRole(String id){
		String RoleId =service.getRoleById(id);
		return RoleId;
		
	}


	public String login()throws JSONException, IllegalAccessException{
		Clientloginhttp client= new Clientloginhttp();
		User u =new User();
		u.setEmail("aziz@gmail.com");
		u.setpassword("*Passw0rd");
		String idClient =client.login(u);
		System.out.println("okok"+idClient+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		if (idClient.equals("false")){
			return"/admin/listroutes?faces-redirect=true";
			
		}else{
		System.out.println(idClient.substring(1, 37).trim());
		
		 String test =findUserbyRole(idClient.substring(1,idClient.length()-1).trim());
		 
		 System.out.println("okok"+test);
		if (test.equals("2")){
		//	userselected = service.getuserr(idClient.substring(1,idClient.length()-1).trim());
			 return"/index?faces-redirect=true";  
			 
		 }else {
			 
			 return"/register/register"; 
		 }
		
		}
		
	}


public String doLogout() {
	userselected = null;
	FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
	return  "/SignIn?faces-redirect=true";
}

}
